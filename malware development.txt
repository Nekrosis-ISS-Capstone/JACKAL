order of operations

1. anti-sandbox - on first run of the executable, create 
2. anti-debugging
3. packing the malware with something like vmprotect, UPX, PESpin, obsidium, themida, morphine



///////////// sandbox detection

to check if your malware is in a sandbox: check for a file you placed somewhere else on the filesystem.
If it does not exist, your executable is running on another computer or inside a sandbox.

(But it does NOT protect against debugging though. You need something else for that)

If you have initial access to a system, you place the executable and schedule it, then you create the canary file and just wait.

When your program can't find the file, you know for sure that you aren't running on the system you wanted to run on and should nope the hell out.

Any AV that doesn't do in-place analysis or copies the canary file too would have a hard time doing any run-time analysis.
This would obstruct any external analysis, including virustotal or similar services.



https://pentest.blog/wp-content/uploads/Untitled-4.png // malware flowchart for shellcode execution




 







//////////////////////////////////////////// anti debugging obfuscated


#define WIN32_LEAN_AND_MEAN
#include <Windows.h>

// Define custom types to make the code less obvious
typedef struct _HidPeB {
    DWORD32 BeingDebugged;
} HidPEB, *PHidPEB;

#define HID_PEB_OFFSET 0x30

// Function prototype
typedef BOOL(WINAPI* IsBeingWatchedFunc)();

// Obfuscated function
BOOL Hid_IsBeingWatched() {
    HMODULE kernel32Module = GetModuleHandleA("kernel32.dll");
    if (kernel32Module != NULL) {
        // GetProcAddress by hash
        FARPROC procAddress = GetProcAddress(kernel32Module, (LPCSTR)0x35b5a691); // "IsDebuggerPresent"

        // Call the function
        if (procAddress != NULL && ((IsBeingWatchedFunc)procAddress)()) {
            return TRUE;
        }
    }

    return FALSE;
}

int main() {
    if (Hid_IsBeingWatched()) {
        MessageBoxA(NULL, "Debugger detected!", "Anti-Debugging", MB_ICONEXCLAMATION);
    } else {
        MessageBoxA(NULL, "No debugger detected.", "Anti-Debugging", MB_ICONINFORMATION);
    }

    return 0;
}
